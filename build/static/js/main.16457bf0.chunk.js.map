{"version":3,"sources":["components/name.js","components/jokebox.js","components/button.js","dataAccess/jokes.js","pages/FavPage.js","App.js","serviceWorker.js","index.js"],"names":["Sname","Styled","p","Name","Sjokebox","Jokebox","joke","value","Sbutton","styled","div","getJoke","a","fetch","method","res","json","Joke","JokeContent","Delete","jokes","deleteFavJoke","clearAllHandler","Fragment","map","key","id","onClick","Wrapper","Header","FavButton","withRouter","history","React","useState","setJoke","favJokes","setFavJokes","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","newJoke","interval","setI","filter","item","location","pathname","push","exact","path","clearInterval","setInterval","find","length","index","addFavJoke","FavPage","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16457bf0.chunk.js","sourcesContent":["import React from 'react';\r\nimport Styled from 'styled-components'\r\n\r\nconst Sname = Styled.p`\r\n    color: blue;\r\n    font-size: 40px;\r\n    font-weight: bold;\r\n`\r\n\r\nconst Name = () => {\r\n    return(\r\n        <div>\r\n            <Sname>Chuk's joke</Sname>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Name;","import React from 'react';\r\nimport Styled from 'styled-components'\r\n\r\n\r\nconst Sjokebox = Styled.p`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 600px;\r\n    height: 200px;\r\n    border: solid 3px red;\r\n    padding: 50px;\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n\r\n`\r\n\r\nconst Jokebox = ({joke}) => {\r\n    return(\r\n        <div>\r\n            <Sjokebox>{joke.value}</Sjokebox>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jokebox;","import styled from 'styled-components';\r\n\r\n\r\nconst Sbutton = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: pink;\r\n    border: solid red 2px;\r\n    cursor: pointer;\r\n    margin: 5px;\r\n    height: 40px;\r\n    width: 200px;\r\n    &:hover {\r\n        background-color:red;\r\n    }\r\n`\r\n\r\n\r\nexport default Sbutton;","export const getJoke = async () => {\r\n\r\n    let res = await fetch('https://api.chucknorris.io/jokes/random', {\r\n        method: 'GET',\r\n        });\r\n    \r\n        const json = await res.json();\r\n\r\n    return json;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../components/button'\r\n\r\nconst Joke = styled.div`\r\n    display: flex;\r\n    width: 600px;\r\n    min-height: 40px;\r\n    border: 1.5px solid orange;\r\n    margin-top: 10px;\r\n`\r\n\r\nconst JokeContent = styled.div`\r\n    width: 80%;\r\n    \r\n`\r\n\r\nconst Delete = styled.div`\r\n    background-color: blue;\r\n    color: white;\r\n    width: 20%;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: black;\r\n    }\r\n`\r\n\r\n\r\nexport default ({jokes, deleteFavJoke, clearAllHandler}) => {\r\n    return(\r\n        <React.Fragment>\r\n            {jokes.map((joke) => {\r\n                return(\r\n                    <Joke key={joke.id}>\r\n                        <JokeContent>{joke.value}</JokeContent>\r\n                        <Delete onClick={() => deleteFavJoke(joke)}>Delete</Delete>\r\n                    </Joke>\r\n                )\r\n            } )}\r\n            <Button onClick = {clearAllHandler}>Clear all</Button>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Switch, Route, withRouter } from \"react-router-dom\";\n\nimport Name from \"./components/name\";\nimport Jokebox from \"./components/jokebox\";\nimport Button from \"./components/button\";\nimport { getJoke } from \"./dataAccess/jokes\";\nimport FavPage from \"./pages/FavPage\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 600px;\n`;\n\nconst FavButton = styled.div`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\n\nfunction App({ history }) {\n  const [joke, setJoke] = React.useState({ value: \"joke\" });\n\n  const [favJokes, setFavJokes] = React.useState([]);\n\n  React.useEffect(() => {setFavJokes(JSON.parse(localStorage.getItem('favJokes')))}, []);\n  React.useEffect(() => {localStorage.setItem('favJokes', JSON.stringify(favJokes))}, [favJokes]);\n \n\n  const newJoke = async () => {\n    const res = await getJoke();\n    setJoke(res);\n  };\n\n  const [interval, setI] = React.useState(null);\n\n  const rollinJokes = () => {\n    if (interval) {\n      clearInterval(interval);\n      setI(null);\n    } else {\n      setI(setInterval(newJoke, 3000));\n    }\n  };\n\n  const navigate = () => {\n    if (history.location.pathname === \"/fav\") {\n      history.push(\"/\");\n      //console.log(history);\n    } else {\n      history.push(\"/fav\");\n    }\n  };\n\n  const addFavJoke = (joke) => {\n    if (\n      favJokes.find((item) => {\n        return joke.id === item.id;\n      })\n    ) {\n      deleteFavJoke(joke);\n    } else {\n      if ([...favJokes, joke].length > 10) {\n        setFavJokes([...favJokes, joke].filter((joke, index) => {\n          return index > 0;\n        }))\n      } else {\n        setFavJokes([...favJokes, joke]);\n      }\n    }\n    \n  };\n\n  const deleteFavJoke = (joke) => {\n    setFavJokes(\n      favJokes.filter((item) => {\n        return joke.id !== item.id;\n      })\n    );\n  };\n\n  const clearAllHandler = () => {\n    setFavJokes([]);\n  };\n\n  return (\n    <Wrapper>\n      <Header>\n        <Name></Name>\n        <FavButton onClick={navigate}>Fav</FavButton>\n      </Header>\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Jokebox joke={joke}></Jokebox>\n          <Button onClick={newJoke}>Get joke</Button>\n          <Button onClick={rollinJokes}>Let's have dis jokes rolli'n</Button>\n          <Button onClick={() => addFavJoke(joke)}>\n            {favJokes.find((item) => {\n              return joke.id === item.id;\n            })\n              ? \"Delete from fav\"\n              : \"Add to fav\"}\n          </Button>\n        </Route>\n\n        <Route exact path=\"/fav\">\n          <FavPage jokes={favJokes} deleteFavJoke={deleteFavJoke} clearAllHandler={clearAllHandler}></FavPage>\n        </Route>\n      </Switch>\n    </Wrapper>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}